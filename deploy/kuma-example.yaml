---
apiVersion: v1
kind: Namespace
metadata:
  name: kuma-example
  labels:
    kuma.io/sidecar-injection: enabled

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-app-config
  namespace: kuma-example
data:
  kong.yml: |
    _format_version: "1.1"

    services:
    - name: mockbin.org
      url: http://mockbin.org
      routes:
      - name: default
        paths:
        - /
---
apiVersion: v1
kind: Service
metadata:
  name: example-app
  namespace: kuma-example
spec:
  ports:
  - port: 8000
    name: http
  selector:
    app: example-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-app-service-account
  namespace: kuma-example
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: kuma-example
  labels:
    app: example-app
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
    spec:
      serviceAccountName: example-app-service-account
      containers:
      - name: example-app
        image: "kong:1.1.2-alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: KONG_ADMIN_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_DECLARATIVE_CONFIG
          value: "/etc/kong/kong.yml"
        volumeMounts:
        - name: example-app-config
          mountPath: /etc/kong
        livenessProbe:
          exec:
            command:
            - curl
            - -s
            - http://localhost:8000
        readinessProbe:
          exec:
            command:
            - curl
            - -s
            - http://localhost:8000
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: example-app-config
        configMap:
          name: example-app-config

---
apiVersion: v1
kind: Service
metadata:
  name: example-client
  namespace: kuma-example
spec:
  ports:
  - port: 3000
    name: http
  selector:
    app: example-client
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-client-service-account
  namespace: kuma-example
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-client
  namespace: kuma-example
  labels:
    app: example-client
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: example-client
  template:
    metadata:
      labels:
        app: example-client
    spec:
      serviceAccountName: example-client-service-account
      containers:
      - name: example-client
        image: kong-docker-kuma-ci-docker.bintray.io/curl
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        command:
        - nc
        - -lk
        - -p
        - "3000"
        - -e
        - curl
        - --silent
        - --show-error
        - --include
        - --fail
        - http://example-app.kuma-example:8000/request
        resources:
          requests:
            cpu: 10m
            memory: 16Mi

# Example setup to verify TrafficRoute
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: kuma-example
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: backend

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: backend
    version: v1
  name: backend-v1
  namespace: kuma-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        version: v1
        env: prod
    spec:
      containers:
      - args:
        - nc
        - -lk
        - -s
        - 127.0.0.1 
        - -p
        - "8080"
        - -e
        - echo
        - -e
        - 'HTTP/1.1 200 OK\r\nContent-Length: 17\r\n\r\n{"version":"v1"}\n'
        ports:
        - containerPort: 8080
        image: busybox
        imagePullPolicy: Always
        name: app
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: backend
    version: v2
  name: backend-v2
  namespace: kuma-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v2
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        version: v2
        env: intg
    spec:
      containers:
      - args:
        - nc
        - -lk
        - -s
        - 127.0.0.1
        - -p
        - "8080"
        - -e
        - echo
        - -e
        - 'HTTP/1.1 200 OK\r\nContent-Length: 17\r\n\r\n{"version":"v2"}\n'
        ports:
        - containerPort: 8080
        image: busybox
        imagePullPolicy: Always
        name: app

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: backend
    version: v3
  name: backend-v3
  namespace: kuma-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v3
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        version: v3
        env: dev
    spec:
      containers:
      - args:
        - nc
        - -lk
        - -s
        - 127.0.0.1
        - -p
        - "8080"
        - -e
        - echo
        - -e
        - 'HTTP/1.1 200 OK\r\nContent-Length: 17\r\n\r\n{"version":"v3"}\n'
        ports:
        - containerPort: 8080
        image: busybox
        imagePullPolicy: Always
        name: app

---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: kuma-example
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: kuma-example
  labels:
    app: web
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
        version: v2
        env: prod 
    spec:
      containers:
      - name: web
        image: kong-docker-kuma-ci-docker.bintray.io/curl
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        command:
        - nc
        - -lk
        - -p
        - "8080"
        - -e
        - curl
        - --silent
        - --show-error
        - --include
        - --fail
        - http://backend.kuma-example:8080/request
        resources:
          requests:
            cpu: 10m
            memory: 16Mi



cat <<EOF | kubectl apply -f -
apiVersion: kuma.io/v1alpha1
kind: TrafficRoute
metadata:
  name: web-to-backend
  namespace: kuma-example
mesh: default
spec:
  sources:
  - match:
      service: web.kuma-example.svc:8080
  destinations:
  - match:
      service: backend.kuma-example.svc:8080
  conf:
  # it is NOT a percentage. just a positive weight
  - weight: 90
    destination:
      service: backend.kuma-example.svc:8080
      env: prod

  # we're NOT checking if total of all weights is 100  
  - weight: 10
    destination:
      service: backend.kuma-example.svc:8080
      env: intg
  
  # 0 means no traffic will be sent there
  - weight: 0
    destination:
      service: backend.kuma-example.svc:8080
      env: dev
EOF